[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/sharpliner/sharpliner")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Sharpliner.Tests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v10.0", FrameworkDisplayName=".NET 10.0")]
namespace Sharpliner.AzureDevOps
{
    public static class AdoExpressionExtensions
    {
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> DeploymentJob(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> expression, Sharpliner.AzureDevOps.JobBase job) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Group(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string name) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> Job(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> expression, Sharpliner.AzureDevOps.JobBase job) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> expression, Sharpliner.AzureDevOps.JobLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary<T>(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> expression)
            where T : Sharpliner.AzureDevOps.JobLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobTemplate(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> expression, string path, Sharpliner.AzureDevOps.TemplateParameters parameters) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> expression, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>[] jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> expression, params Sharpliner.AzureDevOps.Job[] jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>> jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Job> jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stage(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, Sharpliner.AzureDevOps.Stage stage) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, Sharpliner.AzureDevOps.StageLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary<T>(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression)
            where T : Sharpliner.AzureDevOps.StageLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageTemplate(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, string path, Sharpliner.AzureDevOps.TemplateParameters parameters) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>[] stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, params Sharpliner.AzureDevOps.Stage[] stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>> stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Stage> stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Step(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, Sharpliner.AzureDevOps.Step step) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, Sharpliner.AzureDevOps.StepLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary<T>(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression)
            where T : Sharpliner.AzureDevOps.StepLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepTemplate(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, string path, Sharpliner.AzureDevOps.TemplateParameters parameters) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>[] steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, params Sharpliner.AzureDevOps.Step[] steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>> steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Step> steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string name, bool value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string name, System.Enum value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string name, int value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string name, string value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, Sharpliner.AzureDevOps.VariableLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary<T>(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression)
            where T : Sharpliner.AzureDevOps.VariableLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableTemplate(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, string path, Sharpliner.AzureDevOps.TemplateParameters parameters) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>[] variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, params Sharpliner.AzureDevOps.VariableBase[] variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>> variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.VariableBase> variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> expression, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "value"})] params System.ValueTuple<string, object>[] variables) { }
    }
    public sealed class AgentVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ContainerMapping { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference HomeDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Id { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobStatus { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference MachineName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Name { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference OS { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference OSArchitecture { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TempDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ToolsDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference WorkFolder { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Property)]
    public class AllowedValuesAttribute : System.Attribute
    {
        public AllowedValuesAttribute(params object?[] values) { }
        public object?[] Values { get; }
    }
    public sealed class ArrayParameter<T> : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T>>, System.IEquatable<Sharpliner.AzureDevOps.ArrayParameter<T>>
    {
        public ArrayParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T>? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class AzureDevOpsDefinition
    {
        protected static readonly Sharpliner.AzureDevOps.VariableReferences.DependencyVariable dependencies;
        protected static readonly Sharpliner.AzureDevOps.TemplateDefinition.TemplateParameterReference parameters;
        protected static readonly Sharpliner.AzureDevOps.VariablesReference variables;
        protected AzureDevOpsDefinition() { }
        protected static Sharpliner.AzureDevOps.Tasks.AzureCliTaskBuilder AzureCli { get; }
        protected static Sharpliner.AzureDevOps.Tasks.BashTaskBuilder Bash { get; }
        protected static Sharpliner.AzureDevOps.Tasks.CheckoutTaskBuilder Checkout { get; }
        protected static Sharpliner.AzureDevOps.Tasks.DotNetTaskBuilder DotNet { get; }
        protected static Sharpliner.AzureDevOps.Tasks.DownloadTaskBuilder Download { get; }
        protected static Sharpliner.AzureDevOps.ElseCondition Else { get; }
        protected static Sharpliner.AzureDevOps.Expressions.IfConditionBuilder If { get; }
        protected static Sharpliner.AzureDevOps.InlineCondition IsNotPullRequest { get; }
        protected static Sharpliner.AzureDevOps.InlineCondition IsPullRequest { get; }
        protected static Sharpliner.AzureDevOps.DependsOn NoDependsOn { get; }
        protected static Sharpliner.AzureDevOps.Tasks.NuGetTaskBuilder NuGet { get; }
        protected static Sharpliner.AzureDevOps.Tasks.PowershellTaskBuilder Powershell { get; }
        protected static Sharpliner.AzureDevOps.Tasks.PublishTaskBuilder Publish { get; }
        protected static Sharpliner.AzureDevOps.Tasks.PwshTaskBuilder Pwsh { get; }
        protected static Sharpliner.AzureDevOps.Tasks.ScriptTaskBuilder Script { get; }
        protected static Sharpliner.AzureDevOps.InlineCondition And(params Sharpliner.AzureDevOps.InlineCondition[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition And(params string[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition And<T>(params Sharpliner.AzureDevOps.InlineCondition[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition<T> And<T>(params string[] expressions) { }
        protected static Sharpliner.AzureDevOps.BooleanParameter BooleanParameter(string name, string? displayName = null, bool? defaultValue = default) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Condition(string condition) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Contains(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Contains<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition ContainsValue(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition ContainsValue<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.DeploymentJob DeploymentJob(string jobName, string? displayName = null) { }
        protected static Sharpliner.AzureDevOps.DeploymentListParameter DeploymentListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.DeploymentJob>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.DeploymentParameter DeploymentParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.DeploymentJob? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.EachBlock Each(string iterator, string collection) { }
        protected static Sharpliner.AzureDevOps.InlineCondition EndsWith(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition EndsWith<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.EnumParameter<TEnum> EnumParameter<TEnum>(string name, string? displayName = null, TEnum? defaultValue = default)
            where TEnum :  struct, System.Enum { }
        protected static Sharpliner.AzureDevOps.InlineCondition Equal(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Equal<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> ExpandJobs(params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>[] jobs) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> ExpandJobs(params Sharpliner.AzureDevOps.Job[] jobs) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> ExpandJobs(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>> jobs) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> ExpandJobs(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Job> jobs) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> ExpandStages(params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>[] stages) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> ExpandStages(params Sharpliner.AzureDevOps.Stage[] stages) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> ExpandStages(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>> stages) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> ExpandStages(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Stage> stages) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> ExpandSteps(params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>[] steps) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> ExpandSteps(params Sharpliner.AzureDevOps.Step[] steps) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> ExpandSteps(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>> steps) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> ExpandSteps(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Step> steps) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> ExpandVariables(params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>[] variables) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> ExpandVariables(params Sharpliner.AzureDevOps.VariableBase[] variables) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> ExpandVariables(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>> variables) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> ExpandVariables(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.VariableBase> variables) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Greater(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Greater<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Group(string name) { }
        protected static Sharpliner.AzureDevOps.InlineCondition In(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition In<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition IsBranch(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression branchName) { }
        protected static Sharpliner.AzureDevOps.InlineCondition IsNotBranch(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression branchName) { }
        protected static Sharpliner.AzureDevOps.Job Job(string jobName, string? displayName = null) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary(Sharpliner.AzureDevOps.JobLibrary library) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary<T>()
            where T : Sharpliner.AzureDevOps.JobLibrary, new () { }
        protected static Sharpliner.AzureDevOps.JobListParameter JobListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.JobParameter JobParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.JobBase? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.Template<Sharpliner.AzureDevOps.JobBase> JobTemplate(string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Less(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Less<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition NotEqual(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition NotEqual<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition NotIn(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition NotIn<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression[] haystack) { }
        protected static Sharpliner.AzureDevOps.NumberParameter NumberParameter(string name, string? displayName = null, int? defaultValue = default, System.Collections.Generic.IEnumerable<int?>? allowedValues = null) { }
        protected static Sharpliner.AzureDevOps.ObjectParameter ObjectParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.DictionaryExpression? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.ArrayParameter<T> ObjectParameter<T>(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Or(params Sharpliner.AzureDevOps.InlineCondition[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Or(params string[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Or<T>(params Sharpliner.AzureDevOps.InlineCondition[] expressions) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Or<T>(params string[] expressions) { }
        protected static Sharpliner.AzureDevOps.Stage Stage(string stageName, string? displayName = null) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary(Sharpliner.AzureDevOps.StageLibrary library) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary<T>()
            where T : Sharpliner.AzureDevOps.StageLibrary, new () { }
        protected static Sharpliner.AzureDevOps.StageListParameter StageListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.StageParameter StageParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Stage? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.Template<Sharpliner.AzureDevOps.Stage> StageTemplate(string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        protected static Sharpliner.AzureDevOps.InlineCondition StartsWith(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.InlineCondition StartsWith<T>(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression haystack) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary(Sharpliner.AzureDevOps.StepLibrary library) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary<T>()
            where T : Sharpliner.AzureDevOps.StepLibrary, new () { }
        protected static Sharpliner.AzureDevOps.StepListParameter StepListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Step>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.StepParameter StepParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Step? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.Template<Sharpliner.AzureDevOps.Step> StepTemplate(string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        protected static Sharpliner.AzureDevOps.StringListParameter StringListParameter(string name, string? displayName = null, System.Collections.Generic.IEnumerable<string>? defaultValue = null) { }
        protected static Sharpliner.AzureDevOps.StringParameter StringParameter(string name, string? displayName = null, string? defaultValue = null, System.Collections.Generic.IEnumerable<string>? allowedValues = null) { }
        protected static Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask Task(string taskName, string? displayName = null) { }
        protected static Sharpliner.AzureDevOps.Step ValidateYamlsArePublished(string pipelineProject) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(string name, bool value) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(string name, System.Enum value) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(string name, int value) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(string name, string value) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary(Sharpliner.AzureDevOps.VariableLibrary library) { }
        protected static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary<T>()
            where T : Sharpliner.AzureDevOps.VariableLibrary, new () { }
        protected static Sharpliner.AzureDevOps.Template<Sharpliner.AzureDevOps.VariableBase> VariableTemplate(string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Xor(Sharpliner.AzureDevOps.InlineCondition expression1, Sharpliner.AzureDevOps.InlineCondition expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Xor(string condition1, string condition2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Xor<T>(Sharpliner.AzureDevOps.Expressions.Condition expression1, Sharpliner.AzureDevOps.Expressions.Condition expression2) { }
        protected static Sharpliner.AzureDevOps.InlineCondition Xor<T>(string expression1, string expression2) { }
    }
    public sealed class BooleanParameter : Sharpliner.AzureDevOps.Parameter<bool?>, System.IEquatable<Sharpliner.AzureDevOps.BooleanParameter>
    {
        public BooleanParameter(string name, string? displayName = null, bool? defaultValue = default) { }
        public override string Type { get; }
    }
    public class BuildResource : System.IEquatable<Sharpliner.AzureDevOps.BuildResource>
    {
        public BuildResource(string identifier) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Connection { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="build")]
        public string Identifier { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Source { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Trigger { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Type { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Version { get; init; }
    }
    public sealed class BuildVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference ArtifactStagingDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference BinariesDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildNumber { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildUri { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference CommonTestResultsDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ContainerId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefinitionName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefinitionVersion { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference QueuedBy { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference QueuedById { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Reason { get; }
        public Sharpliner.AzureDevOps.RepositoryVariableReference Repository { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference RequestedFor { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference RequestedForEmail { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference RequestedForId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceBranch { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceBranchName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceTfvcShelveset { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceVersion { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceVersionMessage { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourcesDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference StagingDirectory { get; }
        public Sharpliner.AzureDevOps.TriggeredByVariableReference TriggeredBy { get; }
    }
    public class CanaryStrategy : Sharpliner.AzureDevOps.DeploymentStrategy, System.IEquatable<Sharpliner.AzureDevOps.CanaryStrategy>
    {
        public CanaryStrategy() { }
        [YamlDotNet.Serialization.YamlMember(Order=50)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<int> Increments { get; init; }
        protected override void WriteCustomFields(YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer) { }
    }
    public sealed class ChecksVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference StageAttempt { get; }
    }
    public static class ConditionExtensions
    {
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> DeploymentJob(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> job) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> DeploymentJob(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.JobBase job) { }
        public static Sharpliner.AzureDevOps.IfCondition Each(this Sharpliner.AzureDevOps.IfCondition condition, string iterator, string collection) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Group(this Sharpliner.AzureDevOps.IfCondition condition, string name) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> Job(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> job) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> Job(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.JobBase job) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.JobLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobLibrary<T>(this Sharpliner.AzureDevOps.IfCondition condition)
            where T : Sharpliner.AzureDevOps.JobLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> JobTemplate(this Sharpliner.AzureDevOps.IfCondition condition, string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>[] jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Job[] jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job>> jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Job> Jobs(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Job> jobs) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool> Pool(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool> pool) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool> Pool(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Pool pool) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stage(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> stage) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stage(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Stage stage) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.StageLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageLibrary<T>(this Sharpliner.AzureDevOps.IfCondition condition)
            where T : Sharpliner.AzureDevOps.StageLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> StageTemplate(this Sharpliner.AzureDevOps.IfCondition condition, string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>[] stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Stage[] stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>> stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> Stages(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Stage> stages) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Step(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> step) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Step(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Step step) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.StepLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepLibrary<T>(this Sharpliner.AzureDevOps.IfCondition condition)
            where T : Sharpliner.AzureDevOps.StepLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> StepTemplate(this Sharpliner.AzureDevOps.IfCondition condition, string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>[] steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Step[] steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>> steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> Steps(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Step> steps) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Strategy> Strategy(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Strategy strategy) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<T> Value<T>(this Sharpliner.AzureDevOps.IfCondition condition, T value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.IfCondition condition, string name, bool value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.IfCondition condition, string name, System.Enum value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.IfCondition condition, string name, int value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variable(this Sharpliner.AzureDevOps.IfCondition condition, string name, string value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary(this Sharpliner.AzureDevOps.IfCondition condition, Sharpliner.AzureDevOps.VariableLibrary library) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableLibrary<T>(this Sharpliner.AzureDevOps.IfCondition condition)
            where T : Sharpliner.AzureDevOps.VariableLibrary, new () { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> VariableTemplate(this Sharpliner.AzureDevOps.IfCondition condition, string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>[] variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.IfCondition condition, params Sharpliner.AzureDevOps.VariableBase[] variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>> variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.IfCondition condition, System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.VariableBase> variables) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> Variables(this Sharpliner.AzureDevOps.IfCondition condition, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "value"})] params System.ValueTuple<string, object>[] variables) { }
    }
    public class ContainerMountSettings : System.IEquatable<Sharpliner.AzureDevOps.ContainerMountSettings>
    {
        public ContainerMountSettings() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Externals { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Tasks { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Tools { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Work { get; init; }
    }
    public class ContainerReference : System.IEquatable<Sharpliner.AzureDevOps.ContainerReference>
    {
        public ContainerReference() { }
        public string? Endpoint { get; init; }
        public Sharpliner.AzureDevOps.Expressions.DictionaryExpression Env { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Image { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Options { get; init; }
    }
    public class ContainerResource : System.IEquatable<Sharpliner.AzureDevOps.ContainerResource>
    {
        public ContainerResource(string identifier) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Endpoint { get; init; }
        public Sharpliner.AzureDevOps.Expressions.DictionaryExpression Env { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="container")]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Identifier { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Image { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? MapDockerSocket { get; init; }
        public Sharpliner.AzureDevOps.ContainerMountSettings? MountReadOnly { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Options { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Ports { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Volumes { get; init; }
    }
    public abstract class DefinitionLibrary<T> : Sharpliner.AzureDevOps.AzureDevOpsDefinition { }
    public class DependencyVariable : Sharpliner.AzureDevOps.VariableBase, System.IEquatable<Sharpliner.AzureDevOps.DependencyVariable>
    {
        public DependencyVariable(string variableName, string stepName, string jobName) { }
        public string JobName { get; }
        public string StepName { get; }
        public string VariableName { get; }
        public override string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.DependencyVariable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(Sharpliner.AzureDevOps.DependencyVariable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(Sharpliner.AzureDevOps.DependencyVariable variable) { }
    }
    public class DependsOn : Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string>, YamlDotNet.Serialization.IYamlConvertible
    {
        public DependsOn(params string[] values) { }
        public static Sharpliner.AzureDevOps.DependsOn op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference parameter) { }
        public static Sharpliner.AzureDevOps.DependsOn op_Implicit(string value) { }
    }
    public class DeploymentJob : Sharpliner.AzureDevOps.JobBase, System.IEquatable<Sharpliner.AzureDevOps.DeploymentJob>
    {
        public DeploymentJob(string name, string? displayName = null) { }
        [YamlDotNet.Serialization.YamlMember(Order=1201)]
        public Sharpliner.AzureDevOps.Environment? Environment { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="deployment", DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.value__, Order=1)]
        public string JobName { get; }
        [YamlDotNet.Serialization.YamlMember(Order=1300)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.DeploymentStrategy>? Strategy { get; init; }
    }
    public sealed class DeploymentListParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.DeploymentJob>>, System.IEquatable<Sharpliner.AzureDevOps.DeploymentListParameter>
    {
        public DeploymentListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.DeploymentJob>? defaultValue = null) { }
        public override string Type { get; }
    }
    public sealed class DeploymentParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.DeploymentJob>, System.IEquatable<Sharpliner.AzureDevOps.DeploymentParameter>
    {
        public DeploymentParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.DeploymentJob? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class DeploymentStrategy : System.IEquatable<Sharpliner.AzureDevOps.DeploymentStrategy>, YamlDotNet.Serialization.IYamlConvertible
    {
        protected DeploymentStrategy(string type) { }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.LifeCycleHook Deploy { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=600)]
        public Sharpliner.AzureDevOps.LifeCycleHook OnFailure { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=500)]
        public Sharpliner.AzureDevOps.LifeCycleHook OnSuccess { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=400)]
        public Sharpliner.AzureDevOps.LifeCycleHook PostRouteTraffic { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.LifeCycleHook PreDeploy { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.LifeCycleHook RouteTraffic { get; init; }
        protected abstract void WriteCustomFields(YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer);
    }
    public class EachBlock : Sharpliner.AzureDevOps.IfCondition { }
    public class ElseCondition : Sharpliner.AzureDevOps.Expressions.Condition
    {
        public ElseCondition() { }
    }
    public sealed class EnumParameter<TEnum> : Sharpliner.AzureDevOps.Parameter<TEnum?>, System.IEquatable<Sharpliner.AzureDevOps.EnumParameter<TEnum>>
        where TEnum :  struct, System.Enum
    {
        public EnumParameter(string name, string? displayName = null, TEnum? defaultValue = default) { }
        public override string Type { get; }
    }
    public class Environment : System.IEquatable<Sharpliner.AzureDevOps.Environment>
    {
        public Environment(string name, string? resourceName = null) { }
        public string Name { get; }
        public int? ResourceId { get; init; }
        public string? ResourceName { get; init; }
        public Sharpliner.AzureDevOps.ResourceType? ResourceType { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.List<string> Tags { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="tags")]
        public string? _Tags { get; }
    }
    public sealed class EnvironmentVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference Id { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Name { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ResourceId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ResourceName { get; }
    }
    public class Extends : System.IEquatable<Sharpliner.AzureDevOps.Extends>
    {
        public Extends(string template, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public Sharpliner.AzureDevOps.TemplateParameters? Parameters { get; init; }
        public string Template { get; }
    }
    public abstract class ExtendsPipelineDefinition : Sharpliner.AzureDevOps.ExtendsPipelineDefinition<Sharpliner.AzureDevOps.PipelineWithExtends>
    {
        protected ExtendsPipelineDefinition() { }
    }
    public abstract class ExtendsPipelineDefinition<TPipeline> : Sharpliner.AzureDevOps.PipelineDefinitionBase<TPipeline>
        where TPipeline : Sharpliner.AzureDevOps.PipelineWithExtends
    {
        protected ExtendsPipelineDefinition() { }
    }
    public abstract class ExtendsTemplateDefinition : Sharpliner.AzureDevOps.TemplateDefinitionBase<Sharpliner.AzureDevOps.Extends>
    {
        protected ExtendsTemplateDefinition() { }
        public override System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class ExtendsTemplateDefinition<TParameters> : Sharpliner.AzureDevOps.ExtendsTemplateDefinition
        where TParameters :  class, new ()
    {
        protected ExtendsTemplateDefinition(TParameters? typedParameters = null) { }
        public override sealed System.Collections.Generic.List<Sharpliner.AzureDevOps.Parameter> Parameters { get; }
        public static Sharpliner.AzureDevOps.Template<Sharpliner.AzureDevOps.Extends> op_Implicit(Sharpliner.AzureDevOps.ExtendsTemplateDefinition<TParameters> definition) { }
    }
    public class HostedPool : Sharpliner.AzureDevOps.Pool, System.IEquatable<Sharpliner.AzureDevOps.HostedPool>
    {
        public HostedPool(string? name = null, string? vmImage = null) { }
        [YamlDotNet.Serialization.YamlMember(Order=110)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Demands { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=105)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VmImage { get; init; }
    }
    public interface IDependsOn
    {
        Sharpliner.AzureDevOps.DependsOn? DependsOn { get; }
        string Name { get; }
    }
    public abstract class IfCondition : Sharpliner.AzureDevOps.Expressions.Condition
    {
        protected IfCondition() { }
        public string WithoutTags() { }
    }
    public abstract class IfCondition<T> : Sharpliner.AzureDevOps.IfCondition
    {
        protected IfCondition(Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
    }
    public abstract class IfStringCondition : Sharpliner.AzureDevOps.IfCondition
    {
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression two) { }
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression two) { }
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression two) { }
    }
    public abstract class IfStringCondition<T> : Sharpliner.AzureDevOps.IfCondition<T>
    {
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
        protected IfStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
    }
    public class InclusionRule : System.IEquatable<Sharpliner.AzureDevOps.InclusionRule>
    {
        public InclusionRule() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Exclude { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Include { get; init; }
    }
    public abstract class InlineCondition : Sharpliner.AzureDevOps.Expressions.Condition
    {
        protected InlineCondition() { }
        public static string Succeeded { get; }
    }
    public abstract class InlineCondition<T> : Sharpliner.AzureDevOps.InlineCondition
    {
        protected InlineCondition(Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
    }
    public abstract class InlineStringCondition : Sharpliner.AzureDevOps.InlineCondition
    {
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression two) { }
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression two) { }
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression two) { }
    }
    public abstract class InlineStringCondition<T> : Sharpliner.AzureDevOps.InlineCondition<T>
    {
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
        protected InlineStringCondition(string keyword, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression one, Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression two, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? parent = null) { }
    }
    public class Job : Sharpliner.AzureDevOps.JobBase, System.IEquatable<Sharpliner.AzureDevOps.Job>
    {
        public Job(string name, string? displayName = null) { }
        [YamlDotNet.Serialization.YamlMember(Alias="job", DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.value__, Order=1)]
        public string JobName { get; }
        [YamlDotNet.Serialization.YamlMember(Order=700)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Step> Steps { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=400)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Strategy>? Strategy { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1200)]
        public Sharpliner.AzureDevOps.Uses? Uses { get; init; }
    }
    public abstract class JobBase : Sharpliner.AzureDevOps.IDependsOn, System.IEquatable<Sharpliner.AzureDevOps.JobBase>
    {
        protected JobBase(string name, string? displayName = null) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<System.TimeSpan>? CancelTimeout { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=900)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? CancelTimeoutInMinutes { get; }
        [YamlDotNet.Serialization.YamlMember(Order=1100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.InlineCondition>? Condition { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=500)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.ContainerReference>? Container { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1200)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ContinueOnError { get; init; }
        [YamlDotNet.Serialization.YamlMember(DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.OmitNull, Order=200)]
        public Sharpliner.AzureDevOps.DependsOn? DependsOn { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DisplayName { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public string Name { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool>? Pool { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1100)]
        public System.Collections.Generic.Dictionary<string, string> Services { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<System.TimeSpan>? Timeout { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=800)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? TimeoutInMinutes { get; }
        [YamlDotNet.Serialization.YamlMember(Order=600)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.VariableBase> Variables { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1000)]
        public Sharpliner.AzureDevOps.JobWorkspace? Workspace { get; init; }
    }
    public abstract class JobLibrary : Sharpliner.AzureDevOps.DefinitionLibrary<Sharpliner.AzureDevOps.JobBase>
    {
        protected JobLibrary() { }
        public abstract System.Collections.Generic.List<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase>> Jobs { get; }
    }
    public sealed class JobListParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase>>, System.IEquatable<Sharpliner.AzureDevOps.JobListParameter>
    {
        public JobListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase>? defaultValue = null) { }
        public override string Type { get; }
    }
    public sealed class JobParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.JobBase>, System.IEquatable<Sharpliner.AzureDevOps.JobParameter>
    {
        public JobParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.JobBase? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class JobTemplateCollection : Sharpliner.AzureDevOps.TemplateDefinitionCollection<Sharpliner.AzureDevOps.JobBase>
    {
        protected JobTemplateCollection() { }
    }
    public abstract class JobTemplateDefinition : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.JobBase>
    {
        protected JobTemplateDefinition() { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class JobTemplateDefinition<TParameters> : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.JobBase, TParameters>
        where TParameters :  class, new ()
    {
        protected JobTemplateDefinition(TParameters? typedParameters = null) { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public class JobWorkspace : YamlDotNet.Serialization.IYamlConvertible
    {
        public static Sharpliner.AzureDevOps.JobWorkspace All { get; }
        public static Sharpliner.AzureDevOps.JobWorkspace Outputs { get; }
        public static Sharpliner.AzureDevOps.JobWorkspace Resources { get; }
    }
    public class JsonParameterFilter : System.IEquatable<Sharpliner.AzureDevOps.JsonParameterFilter>
    {
        public JsonParameterFilter(string path, string value) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string> Path { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string> Value { get; init; }
    }
    public class LibraryReference<T> : Sharpliner.AzureDevOps.Expressions.AdoExpression<T>, System.IEquatable<Sharpliner.AzureDevOps.LibraryReference<T>>
    {
        public LibraryReference(Sharpliner.AzureDevOps.DefinitionLibrary<T> library) { }
        public LibraryReference(System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Expressions.AdoExpression<T>> items) { }
    }
    public class LifeCycleHook : System.IEquatable<Sharpliner.AzureDevOps.LifeCycleHook>
    {
        public LifeCycleHook() { }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool>? Pool { get; set; }
        [YamlDotNet.Serialization.YamlMember(Order=700)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Step> Steps { get; init; }
    }
    public enum LockBehavior
    {
        [YamlDotNet.Serialization.YamlMember(Alias="runLatest")]
        RunLatest = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="sequential")]
        Sequential = 1,
    }
    public class MatrixStrategy : Sharpliner.AzureDevOps.Strategy, System.IEquatable<Sharpliner.AzureDevOps.MatrixStrategy>, YamlDotNet.Serialization.IYamlConvertible
    {
        public MatrixStrategy() { }
        public System.Collections.Generic.Dictionary<string, System.ValueTuple<string, string>[]> Matrix { get; init; }
    }
    public class NonePrTrigger : Sharpliner.AzureDevOps.PrTrigger, System.IEquatable<Sharpliner.AzureDevOps.NonePrTrigger>, YamlDotNet.Serialization.IYamlConvertible
    {
        public NonePrTrigger() { }
    }
    public class NoneTrigger : Sharpliner.AzureDevOps.Trigger, System.IEquatable<Sharpliner.AzureDevOps.NoneTrigger>, YamlDotNet.Serialization.IYamlConvertible
    {
        public NoneTrigger() { }
    }
    public class NoopJob : Sharpliner.AzureDevOps.Job, System.IEquatable<Sharpliner.AzureDevOps.NoopJob>
    {
        public NoopJob() { }
    }
    public class NpmPackageResource : Sharpliner.AzureDevOps.PackageResource, System.IEquatable<Sharpliner.AzureDevOps.NpmPackageResource>
    {
        public NpmPackageResource(string packageAlias, string packageName) { }
        public override string PackageType { get; }
    }
    public class NuGetPackageResource : Sharpliner.AzureDevOps.PackageResource, System.IEquatable<Sharpliner.AzureDevOps.NuGetPackageResource>
    {
        public NuGetPackageResource(string packageAlias, string packageName) { }
        public override string PackageType { get; }
    }
    public sealed class NumberParameter : Sharpliner.AzureDevOps.Parameter<int?>, System.IEquatable<Sharpliner.AzureDevOps.NumberParameter>
    {
        public NumberParameter(string name, string? displayName = null, int? defaultValue = default, System.Collections.Generic.IEnumerable<int?>? allowedValues = null) { }
        public override string Type { get; }
    }
    public sealed class ObjectParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.DictionaryExpression>, System.IEquatable<Sharpliner.AzureDevOps.ObjectParameter>
    {
        public ObjectParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.DictionaryExpression? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class PackageResource : System.IEquatable<Sharpliner.AzureDevOps.PackageResource>
    {
        public PackageResource(string packageAlias, string packageName) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Connection { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string> Name { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="package")]
        public string PackageAlias { get; }
        public abstract string PackageType { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Trigger { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Version { get; init; }
    }
    public class ParallelStrategy : Sharpliner.AzureDevOps.Strategy, System.IEquatable<Sharpliner.AzureDevOps.ParallelStrategy>
    {
        public ParallelStrategy() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? Parallel { get; init; }
    }
    public abstract class Parameter : System.IEquatable<Sharpliner.AzureDevOps.Parameter>
    {
        protected Parameter(string name, string? displayName = null) { }
        [YamlDotNet.Serialization.YamlMember(Order=101)]
        public string? DisplayName { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public string Name { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=110)]
        public abstract string Type { get; }
        public override sealed string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<string> op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<int> op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<bool> op_Implicit(Sharpliner.AzureDevOps.Parameter parameter) { }
    }
    public abstract class Parameter<T> : Sharpliner.AzureDevOps.Parameter, System.IEquatable<Sharpliner.AzureDevOps.Parameter<T>>
    {
        protected Parameter(string name, string? displayName = null, T? defaultValue = default, System.Collections.Generic.IEnumerable<T>? allowedValues = null) { }
        [YamlDotNet.Serialization.YamlMember(Alias="values", Order=130)]
        public System.Collections.Generic.IEnumerable<T>? AllowedValues { get; init; }
        [YamlDotNet.Serialization.YamlMember(DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.OmitNull, Order=120)]
        public T Default { get; init; }
    }
    public class Pipeline : Sharpliner.AzureDevOps.PipelineBase, System.IEquatable<Sharpliner.AzureDevOps.Pipeline>
    {
        public Pipeline() { }
        [YamlDotNet.Serialization.YamlMember(Order=600)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage> Stages { get; init; }
        public override System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class PipelineBase : System.IEquatable<Sharpliner.AzureDevOps.PipelineBase>
    {
        protected PipelineBase() { }
        [YamlDotNet.Serialization.YamlMember(Order=110)]
        public bool? AppendCommitMessageToRunName { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=120)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.LockBehavior>? LockBehavior { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public string? Name { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=150)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Parameter> Parameters { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=550)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool>? Pool { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.PrTrigger? Pr { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=400)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Resources>? Resources { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=350)]
        public System.Collections.Generic.List<Sharpliner.AzureDevOps.ScheduledTrigger> Schedules { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.Trigger? Trigger { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public abstract System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
        [YamlDotNet.Serialization.YamlMember(Order=500)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.VariableBase> Variables { get; init; }
    }
    public abstract class PipelineCollection : Sharpliner.AzureDevOps.PipelineDefinitionCollection<Sharpliner.AzureDevOps.Pipeline>
    {
        protected PipelineCollection() { }
    }
    public abstract class PipelineDefinition : Sharpliner.AzureDevOps.PipelineDefinitionBase<Sharpliner.AzureDevOps.Pipeline>
    {
        protected PipelineDefinition() { }
    }
    public abstract class PipelineDefinitionBase<TPipeline> : Sharpliner.AzureDevOps.AzureDevOpsDefinition, Sharpliner.ISharplinerDefinition
        where TPipeline : Sharpliner.AzureDevOps.PipelineBase
    {
        public virtual string[]? Header { get; }
        public abstract TPipeline Pipeline { get; }
        public abstract string TargetFile { get; }
        public virtual Sharpliner.TargetPathType TargetPathType { get; }
        public System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
        public string Serialize() { }
    }
    public abstract class PipelineDefinitionCollection<TPipeline> : Sharpliner.AzureDevOps.AzureDevOpsDefinition, Sharpliner.ISharplinerDefinitionCollection
        where TPipeline : Sharpliner.AzureDevOps.PipelineBase
    {
        public System.Collections.Generic.IEnumerable<Sharpliner.ISharplinerDefinition> Definitions { get; }
        public abstract System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.PipelineDefinitionData<TPipeline>> Pipelines { get; }
    }
    public class PipelineDefinitionData<T> : System.IEquatable<Sharpliner.AzureDevOps.PipelineDefinitionData<T>>
    {
        public PipelineDefinitionData(string TargetFile, T Pipeline, Sharpliner.TargetPathType PathType = 0, string[]? Header = null) { }
        public string[]? Header { get; init; }
        public Sharpliner.TargetPathType PathType { get; init; }
        public T Pipeline { get; init; }
        public string TargetFile { get; init; }
    }
    public class PipelineResource : System.IEquatable<Sharpliner.AzureDevOps.PipelineResource>
    {
        public PipelineResource(string identifier) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Branch { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="pipeline")]
        public string Identifier { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Project { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Source { get; init; }
        public System.Collections.Generic.List<string> Tags { get; init; }
        public Sharpliner.AzureDevOps.PipelineTrigger? Trigger { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Version { get; init; }
    }
    public class PipelineTrigger : System.IEquatable<Sharpliner.AzureDevOps.PipelineTrigger>
    {
        public PipelineTrigger() { }
        public PipelineTrigger(params string[] branches) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Batch { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Branches { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Stages { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Tags { get; init; }
    }
    public sealed class PipelineVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Workspace { get; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class PipelineWithExtends : Sharpliner.AzureDevOps.PipelineBase, System.IEquatable<Sharpliner.AzureDevOps.PipelineWithExtends>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public PipelineWithExtends() { }
        [System.Runtime.CompilerServices.RequiredMember]
        [YamlDotNet.Serialization.YamlMember(Order=600)]
        public Sharpliner.AzureDevOps.Extends Extends { get; init; }
        public override System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public class Pool : System.IEquatable<Sharpliner.AzureDevOps.Pool>
    {
        public Pool(string? name) { }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Name { get; init; }
        public static Sharpliner.AzureDevOps.Pool op_Implicit(string vmImage) { }
    }
    public class PrTrigger : System.IEquatable<Sharpliner.AzureDevOps.PrTrigger>
    {
        public PrTrigger() { }
        public PrTrigger(params string[] branches) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? AutoCancel { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Branches { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Drafts { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Paths { get; init; }
        public static Sharpliner.AzureDevOps.NonePrTrigger None { get; }
    }
    public sealed class PullRequestVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference IsFork { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference PullRequestId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference PullRequestNumber { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceBranch { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference SourceRepositoryURI { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TargetBranch { get; }
    }
    public class RepositoryResource : System.IEquatable<Sharpliner.AzureDevOps.RepositoryResource>
    {
        public RepositoryResource(string identifier) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Endpoint { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="repository")]
        public string Identifier { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Name { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Ref { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Trigger>? Trigger { get; init; }
        [YamlDotNet.Serialization.YamlMember(DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.value__)]
        public Sharpliner.AzureDevOps.RepositoryType Type { get; init; }
        public static Sharpliner.AzureDevOps.RepositoryResource AzureDevOps(string identifier, string project, string repoName, string? endpoint = null, string? refName = null) { }
        public static Sharpliner.AzureDevOps.RepositoryResource BitBucket(string identifier, string orgOrUser, string repoName, string endpoint, string? refName = null) { }
        public static Sharpliner.AzureDevOps.RepositoryResource GitHub(string identifier, string orgOrUser, string repoName, string endpoint, string? refName = null) { }
        public static Sharpliner.AzureDevOps.RepositoryResource GitHubEnterprise(string identifier, string orgOrUser, string repoName, string endpoint, string? refName = null) { }
    }
    public enum RepositoryType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="git")]
        Git = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="github")]
        GitHub = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="githubenterprise")]
        GitHubEnterprise = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="bitbucket")]
        BitBucket = 3,
    }
    public sealed class RepositoryVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference Clean { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference GitSubmoduleCheckout { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ID { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference LocalPath { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Name { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Provider { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TfvcWorkspace { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Uri { get; }
    }
    public enum ResourceType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="virtualMachine")]
        VirtualMachine = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="Kubernetes")]
        Kubernetes = 1,
    }
    public class Resources : System.IEquatable<Sharpliner.AzureDevOps.Resources>
    {
        public Resources() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.BuildResource> Builds { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.ContainerResource> Containers { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.PackageResource> Packages { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.PipelineResource> Pipelines { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.RepositoryResource> Repositories { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.WebhookResource> Webhooks { get; init; }
    }
    public class RollingStrategy : Sharpliner.AzureDevOps.DeploymentStrategy, System.IEquatable<Sharpliner.AzureDevOps.RollingStrategy>
    {
        public RollingStrategy() { }
        [YamlDotNet.Serialization.YamlMember(DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.OmitDefaults, Order=50)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? MaxParallel { get; init; }
        protected override void WriteCustomFields(YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer) { }
    }
    public class RunOnceStrategy : Sharpliner.AzureDevOps.DeploymentStrategy, System.IEquatable<Sharpliner.AzureDevOps.RunOnceStrategy>
    {
        public RunOnceStrategy() { }
        protected override void WriteCustomFields(YamlDotNet.Core.IEmitter emitter, YamlDotNet.Serialization.ObjectSerializer nestedObjectSerializer) { }
    }
    public class ScheduledTrigger : System.IEquatable<Sharpliner.AzureDevOps.ScheduledTrigger>
    {
        public ScheduledTrigger(string cronSchedule, params string[] branches) { }
        public ScheduledTrigger(string minute, string hour, string dayOfMonth, string month, string dayOfWeek, params string[] branches) { }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Always { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.InclusionRule? Branches { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="cron", Order=1)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? CronSchedule { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DisplayName { get; init; }
    }
    public class ServerPool : Sharpliner.AzureDevOps.Pool, System.IEquatable<Sharpliner.AzureDevOps.ServerPool>, YamlDotNet.Serialization.IYamlConvertible
    {
        public ServerPool() { }
    }
    public class SingleStagePipeline : Sharpliner.AzureDevOps.PipelineBase, System.IEquatable<Sharpliner.AzureDevOps.SingleStagePipeline>
    {
        public SingleStagePipeline() { }
        [YamlDotNet.Serialization.YamlMember(Order=600)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase> Jobs { get; init; }
        public override System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class SingleStagePipelineCollection : Sharpliner.AzureDevOps.PipelineDefinitionCollection<Sharpliner.AzureDevOps.SingleStagePipeline>
    {
        protected SingleStagePipelineCollection() { }
    }
    public abstract class SingleStagePipelineDefinition : Sharpliner.AzureDevOps.PipelineDefinitionBase<Sharpliner.AzureDevOps.SingleStagePipeline>
    {
        protected SingleStagePipelineDefinition() { }
    }
    public class Stage : Sharpliner.AzureDevOps.IDependsOn, System.IEquatable<Sharpliner.AzureDevOps.Stage>
    {
        public Stage(string name, string? displayName = null) { }
        [YamlDotNet.Serialization.YamlMember(Order=400)]
        public Sharpliner.AzureDevOps.InlineCondition? Condition { get; init; }
        [YamlDotNet.Serialization.YamlMember(DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.OmitNull, Order=100)]
        public Sharpliner.AzureDevOps.DependsOn? DependsOn { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=2)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DisplayName { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=300)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase> Jobs { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=3)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.LockBehavior>? LockBehavior { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="stage", Order=1)]
        public string Name { get; }
        [YamlDotNet.Serialization.YamlMember(Order=250)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool>? Pool { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.VariableBase> Variables { get; init; }
        public Sharpliner.AzureDevOps.Stage DisplayAs(string displayName) { }
    }
    public abstract class StageLibrary : Sharpliner.AzureDevOps.DefinitionLibrary<Sharpliner.AzureDevOps.Stage>
    {
        protected StageLibrary() { }
        public abstract System.Collections.Generic.List<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage>> Stages { get; }
    }
    public sealed class StageListParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage>>, System.IEquatable<Sharpliner.AzureDevOps.StageListParameter>
    {
        public StageListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage>? defaultValue = null) { }
        public override string Type { get; }
    }
    public sealed class StageParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Stage>, System.IEquatable<Sharpliner.AzureDevOps.StageParameter>
    {
        public StageParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Stage? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class StageTemplateCollection : Sharpliner.AzureDevOps.TemplateDefinitionCollection<Sharpliner.AzureDevOps.Stage>
    {
        protected StageTemplateCollection() { }
    }
    public abstract class StageTemplateDefinition : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.Stage>
    {
        protected StageTemplateDefinition() { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class StageTemplateDefinition<TParameters> : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.Stage, TParameters>
        where TParameters :  class, new ()
    {
        protected StageTemplateDefinition(TParameters? typedParameters = null) { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class Step : System.IEquatable<Sharpliner.AzureDevOps.Step>
    {
        protected Step() { }
        [YamlDotNet.Serialization.YamlMember(Order=190)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.InlineCondition>? Condition { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ContinueOnError { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DisplayName { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=175)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Enabled { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=220)]
        public Sharpliner.AzureDevOps.Expressions.DictionaryExpression Env { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=150)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Name { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<System.TimeSpan>? Timeout { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=210)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? TimeoutInMinutes { get; init; }
        public Sharpliner.AzureDevOps.Step DisplayAs(string displayName) { }
        public Sharpliner.AzureDevOps.Step When(string condition) { }
        public Sharpliner.AzureDevOps.Step WhenSucceeded() { }
        public Sharpliner.AzureDevOps.Step WhenSucceededOrFailed() { }
        public Sharpliner.AzureDevOps.Step WithName(string name) { }
    }
    public abstract class StepLibrary : Sharpliner.AzureDevOps.DefinitionLibrary<Sharpliner.AzureDevOps.Step>
    {
        protected StepLibrary() { }
        public abstract System.Collections.Generic.List<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step>> Steps { get; }
    }
    public sealed class StepListParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Step>>, System.IEquatable<Sharpliner.AzureDevOps.StepListParameter>
    {
        public StepListParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Step>? defaultValue = null) { }
        public override string Type { get; }
    }
    public sealed class StepParameter : Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Step>, System.IEquatable<Sharpliner.AzureDevOps.StepParameter>
    {
        public StepParameter(string name, string? displayName = null, Sharpliner.AzureDevOps.Step? defaultValue = null) { }
        public override string Type { get; }
    }
    public abstract class StepTemplateCollection : Sharpliner.AzureDevOps.TemplateDefinitionCollection<Sharpliner.AzureDevOps.Step>
    {
        protected StepTemplateCollection() { }
    }
    public abstract class StepTemplateDefinition : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.Step>
    {
        protected StepTemplateDefinition() { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class StepTemplateDefinition<TParameters> : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.Step, TParameters>
        where TParameters :  class, new ()
    {
        protected StepTemplateDefinition(TParameters? typedParameters = null) { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class Strategy : System.IEquatable<Sharpliner.AzureDevOps.Strategy>
    {
        protected Strategy() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? MaxParallel { get; init; }
    }
    public sealed class StrategyVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference CycleName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Name { get; }
        protected override string Prefix { get; }
    }
    public sealed class StringListParameter : Sharpliner.AzureDevOps.Parameter<System.Collections.Generic.IEnumerable<string>>, System.IEquatable<Sharpliner.AzureDevOps.StringListParameter>
    {
        public StringListParameter(string name, string? displayName = null, System.Collections.Generic.IEnumerable<string>? defaultValue = null) { }
        public override string Type { get; }
    }
    public sealed class StringParameter : Sharpliner.AzureDevOps.Parameter<string>, System.IEquatable<Sharpliner.AzureDevOps.StringParameter>
    {
        public StringParameter(string name, string? displayName = null, string? defaultValue = null, System.Collections.Generic.IEnumerable<string>? allowedValues = null) { }
        public override string Type { get; }
    }
    public sealed class SystemVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference AccessToken { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference CollectionId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference CollectionUri { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference Debug { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefaultWorkingDirectory { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefinitionId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference HostType { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobAttempt { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobDisplayName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference JobName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference PhaseAttempt { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference PhaseDisplayName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference PhaseName { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.PullRequestVariableReference PullRequest { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference StageAttempt { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference StageDisplayName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference StageName { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TeamFoundationCollectionUri { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TeamProject { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TeamProjectId { get; }
    }
    public abstract class TemplateDefinition : Sharpliner.AzureDevOps.AzureDevOpsDefinition
    {
        protected TemplateDefinition() { }
        protected static Sharpliner.AzureDevOps.JobBase JobParameterReference(Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.JobBase> parameter) { }
        protected static Sharpliner.AzureDevOps.JobBase JobParameterReference(string parameterName) { }
        protected static Sharpliner.AzureDevOps.Stage StageParameterReference(Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Stage> parameter) { }
        protected static Sharpliner.AzureDevOps.Stage StageParameterReference(string parameterName) { }
        protected static Sharpliner.AzureDevOps.Step StepParameterReference(Sharpliner.AzureDevOps.Parameter<Sharpliner.AzureDevOps.Step> parameter) { }
        protected static Sharpliner.AzureDevOps.Step StepParameterReference(string parameterName) { }
        public sealed class TemplateParameterReference
        {
            public Sharpliner.AzureDevOps.Expressions.ParameterReference this[string parameterName] { get; }
        }
    }
    public abstract class TemplateDefinitionBase<T> : Sharpliner.AzureDevOps.TemplateDefinition, Sharpliner.ISharplinerDefinition
    {
        public abstract T Definition { get; }
        public virtual string[]? Header { get; }
        public virtual System.Collections.Generic.List<Sharpliner.AzureDevOps.Parameter> Parameters { get; }
        public abstract string TargetFile { get; }
        public virtual Sharpliner.TargetPathType TargetPathType { get; }
        public abstract System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
        public string Serialize() { }
    }
    public abstract class TemplateDefinitionCollection<T> : Sharpliner.AzureDevOps.TemplateDefinition, Sharpliner.ISharplinerDefinitionCollection
    {
        public System.Collections.Generic.IEnumerable<Sharpliner.ISharplinerDefinition> Definitions { get; }
        public abstract System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.TemplateDefinitionData<T>> Templates { get; }
    }
    public class TemplateDefinitionData<T> : System.IEquatable<Sharpliner.AzureDevOps.TemplateDefinitionData<T>>
    {
        public TemplateDefinitionData(string TargetFile, Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> Definition, System.Collections.Generic.List<Sharpliner.AzureDevOps.Parameter>? Parameters = null, Sharpliner.TargetPathType PathType = 0, string[]? Header = null) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> Definition { get; init; }
        public string[]? Header { get; init; }
        public System.Collections.Generic.List<Sharpliner.AzureDevOps.Parameter>? Parameters { get; init; }
        public Sharpliner.TargetPathType PathType { get; init; }
        public string TargetFile { get; init; }
    }
    public abstract class TemplateDefinition<T> : Sharpliner.AzureDevOps.TemplateDefinitionBase<Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T>> { }
    public abstract class TemplateDefinition<T, TParameters> : Sharpliner.AzureDevOps.TemplateDefinition<T>
        where TParameters :  class, new ()
    {
        public override sealed System.Collections.Generic.List<Sharpliner.AzureDevOps.Parameter> Parameters { get; }
        public static Sharpliner.AzureDevOps.Template<T> op_Implicit(Sharpliner.AzureDevOps.TemplateDefinition<T, TParameters> definition) { }
    }
    public class TemplateParameters : Sharpliner.AzureDevOps.Expressions.DictionaryExpression
    {
        public TemplateParameters() { }
    }
    public class Template<T> : Sharpliner.AzureDevOps.Expressions.AdoExpression<T>, System.IEquatable<Sharpliner.AzureDevOps.Template<T>>
    {
        public Template(string path, Sharpliner.AzureDevOps.TemplateParameters? parameters = null) { }
        public Sharpliner.AzureDevOps.TemplateParameters Parameters { get; init; }
    }
    public class Trigger : System.IEquatable<Sharpliner.AzureDevOps.Trigger>
    {
        public Trigger() { }
        public Trigger(params string[] branches) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Batch { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Branches { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Paths { get; init; }
        public Sharpliner.AzureDevOps.InclusionRule? Tags { get; init; }
        public static Sharpliner.AzureDevOps.NoneTrigger None { get; }
    }
    public sealed class TriggeredByVariableReference : Sharpliner.AzureDevOps.VariableReferenceBase
    {
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference BuildNumber { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefinitionId { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference DefinitionName { get; }
        protected override string Prefix { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference ProjectID { get; }
    }
    public class Uses : System.IEquatable<Sharpliner.AzureDevOps.Uses>
    {
        public Uses() { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Pools { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<string> Repositories { get; init; }
    }
    public class Variable : Sharpliner.AzureDevOps.VariableBase, System.IEquatable<Sharpliner.AzureDevOps.Variable>
    {
        public Variable(string name, bool value) { }
        public Variable(string name, System.Enum value) { }
        public Variable(string name, int value) { }
        public Variable(string name, string value) { }
        [YamlDotNet.Serialization.YamlMember(Alias="name", Order=1)]
        public string Name { get; }
        [YamlDotNet.Serialization.YamlMember(Alias="readonly", DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.OmitDefaults, Order=3)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Readonly { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="value", DefaultValuesHandling=YamlDotNet.Serialization.DefaultValuesHandling.value__, Order=2)]
        public object Value { get; init; }
        public Sharpliner.AzureDevOps.Variable ReadOnly() { }
        public override string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<string> op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<int> op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<bool> op_Implicit(Sharpliner.AzureDevOps.Variable variable) { }
    }
    public abstract class VariableBase : System.IEquatable<Sharpliner.AzureDevOps.VariableBase>
    {
        protected VariableBase() { }
    }
    public class VariableGroup : Sharpliner.AzureDevOps.VariableBase, System.IEquatable<Sharpliner.AzureDevOps.VariableGroup>
    {
        public VariableGroup(string name) { }
        [YamlDotNet.Serialization.YamlMember(Alias="group")]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string> Name { get; }
    }
    public abstract class VariableLibrary : Sharpliner.AzureDevOps.DefinitionLibrary<Sharpliner.AzureDevOps.VariableBase>
    {
        protected VariableLibrary() { }
        public abstract System.Collections.Generic.List<Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase>> Variables { get; }
    }
    public abstract class VariableReferenceBase
    {
        protected VariableReferenceBase() { }
        public Sharpliner.AzureDevOps.Expressions.VariableReference this[string variableName] { get; }
        protected abstract string Prefix { get; }
        protected Sharpliner.AzureDevOps.Expressions.VariableReference GetReference(string name) { }
    }
    public abstract class VariableTemplateCollection : Sharpliner.AzureDevOps.TemplateDefinitionCollection<Sharpliner.AzureDevOps.VariableBase>
    {
        protected VariableTemplateCollection() { }
    }
    public abstract class VariableTemplateDefinition : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.VariableBase>
    {
        protected VariableTemplateDefinition() { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public abstract class VariableTemplateDefinition<TParameters> : Sharpliner.AzureDevOps.TemplateDefinition<Sharpliner.AzureDevOps.VariableBase, TParameters>
        where TParameters :  class, new ()
    {
        protected VariableTemplateDefinition(TParameters? typedParameters = null) { }
        public override sealed System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
    }
    public class VariablesReference
    {
        public VariablesReference() { }
        public Sharpliner.AzureDevOps.AgentVariableReference Agent { get; }
        public Sharpliner.AzureDevOps.BuildVariableReference Build { get; }
        public Sharpliner.AzureDevOps.EnvironmentVariableReference Environment { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference this[string variableName] { get; }
        public Sharpliner.AzureDevOps.PipelineVariableReference Pipeline { get; }
        public Sharpliner.AzureDevOps.StrategyVariableReference Strategy { get; }
        public Sharpliner.AzureDevOps.SystemVariableReference System { get; }
        public Sharpliner.AzureDevOps.Expressions.VariableReference TF_BUILD { get; }
    }
    public class WebhookResource : System.IEquatable<Sharpliner.AzureDevOps.WebhookResource>
    {
        public WebhookResource(string identifier) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Connection { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JsonParameterFilter> Filters { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="webhook")]
        public string Identifier { get; }
    }
}
namespace Sharpliner.AzureDevOps.Expressions
{
    public abstract class AdoExpression : System.IEquatable<Sharpliner.AzureDevOps.Expressions.AdoExpression>, YamlDotNet.Serialization.IYamlConvertible
    {
        protected AdoExpression(Sharpliner.AzureDevOps.IfCondition? condition) { }
    }
    public class AdoExpressionList<T> : System.Collections.Generic.List<Sharpliner.AzureDevOps.Expressions.AdoExpression<T>>
    {
        public AdoExpressionList() { }
        public new Sharpliner.AzureDevOps.Expressions.AdoExpression<T> this[int index] { get; set; }
        public void Add(Sharpliner.AzureDevOps.Expressions.AdoExpression<T> item) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> op_Implicit(System.Collections.Generic.List<T> list) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> op_Implicit(System.Collections.ObjectModel.ReadOnlyCollection<T> values) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> op_Implicit(T value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpressionList<T> op_Implicit(T[] values) { }
    }
    public class AdoExpression<T> : Sharpliner.AzureDevOps.Expressions.AdoExpression, System.IEquatable<Sharpliner.AzureDevOps.Expressions.AdoExpression<T>>
    {
        protected AdoExpression() { }
        protected AdoExpression(Sharpliner.AzureDevOps.IfCondition? condition) { }
        public AdoExpression(T definition) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Else { get; }
        public Sharpliner.AzureDevOps.Expressions.IfConditionBuilder ElseIf { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<T> EndEach { get; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<T> EndIf { get; }
        public Sharpliner.AzureDevOps.Expressions.IfConditionBuilder<T> If { get; }
        public System.Collections.Generic.IReadOnlyCollection<T> FlattenDefinitions() { }
        public override string ToString() { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<T> op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference parameterRef) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<T> op_Implicit([System.Diagnostics.CodeAnalysis.NotNullIfNotNull("value")] T? value) { }
    }
    public abstract class Condition : YamlDotNet.Serialization.IYamlConvertible
    {
        protected Condition() { }
        public override string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.Expressions.Condition value) { }
    }
    public class DependencyVariableReference : Sharpliner.AzureDevOps.Expressions.VariableReference
    {
        public string JobName { get; }
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
        public string StepName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public class DictionaryExpression : System.Collections.Generic.Dictionary<string, object>
    {
        public DictionaryExpression() { }
        public DictionaryExpression(System.Collections.Generic.Dictionary<string, object> other) { }
        public object this[string key] { get; set; }
        public void Add(string key, object item) { }
    }
    public class IfConditionBuilder
    {
        public Sharpliner.AzureDevOps.IfCondition IsNotPullRequest { get; }
        public Sharpliner.AzureDevOps.IfCondition IsPullRequest { get; }
        public Sharpliner.AzureDevOps.IfCondition And(params Sharpliner.AzureDevOps.IfCondition[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition And(params string[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition Condition(Sharpliner.AzureDevOps.Expressions.ParameterReference parameter) { }
        public Sharpliner.AzureDevOps.IfCondition Condition(Sharpliner.AzureDevOps.Parameter<bool?> parameter) { }
        public Sharpliner.AzureDevOps.IfCondition Condition(string condition) { }
        public Sharpliner.AzureDevOps.IfCondition Contains(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition ContainsValue(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression[] haystack) { }
        public Sharpliner.AzureDevOps.IfCondition EndsWith(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition Equal(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression2) { }
        public Sharpliner.AzureDevOps.IfCondition Greater(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression first, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression second) { }
        public Sharpliner.AzureDevOps.IfCondition In(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression[] haystack) { }
        public Sharpliner.AzureDevOps.IfCondition IsBranch(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression branchName) { }
        public Sharpliner.AzureDevOps.IfCondition IsNotBranch(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression branchName) { }
        public Sharpliner.AzureDevOps.IfCondition Less(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression first, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression second) { }
        public Sharpliner.AzureDevOps.IfCondition NotEqual(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression2) { }
        public Sharpliner.AzureDevOps.IfCondition NotIn(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression[] haystack) { }
        public Sharpliner.AzureDevOps.IfCondition Or(params Sharpliner.AzureDevOps.IfCondition[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition Or(params string[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition StartsWith(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition Xor(Sharpliner.AzureDevOps.IfCondition expression1, Sharpliner.AzureDevOps.IfCondition expression2) { }
        public Sharpliner.AzureDevOps.IfCondition Xor(string expression1, string expression2) { }
    }
    public class IfConditionBuilder<T>
    {
        public Sharpliner.AzureDevOps.IfCondition<T> IsNotPullRequest { get; }
        public Sharpliner.AzureDevOps.IfCondition<T> IsPullRequest { get; }
        public Sharpliner.AzureDevOps.IfCondition<T> And(params Sharpliner.AzureDevOps.IfCondition[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition<T> And(params string[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Contains(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> ContainsValue(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression[] haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> EndsWith(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Equal(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression2) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Greater(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression first, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression second) { }
        public Sharpliner.AzureDevOps.IfCondition<T> In(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> IsBranch(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression branchName) { }
        public Sharpliner.AzureDevOps.IfCondition<T> IsNotBranch(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression branchName) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Less(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression first, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression second) { }
        public Sharpliner.AzureDevOps.IfCondition<T> NotEqual(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression1, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression expression2) { }
        public Sharpliner.AzureDevOps.IfCondition<T> NotIn(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, params Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression[] haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Or(params Sharpliner.AzureDevOps.IfCondition[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Or(params string[] expressions) { }
        public Sharpliner.AzureDevOps.IfCondition<T> StartsWith(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression needle, Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression haystack) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Xor(Sharpliner.AzureDevOps.IfCondition expression1, Sharpliner.AzureDevOps.IfCondition expression2) { }
        public Sharpliner.AzureDevOps.IfCondition<T> Xor(string expression1, string expression2) { }
    }
    public class JobToJobDeployDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.DependencyVariableReference
    {
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
        public string StageName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public class JobToJobDifferentStageDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.DependencyVariableReference
    {
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
        public string StageName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public class JobToJobSameStageDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.DependencyVariableReference
    {
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
    }
    public class ParameterReference : Sharpliner.AzureDevOps.Expressions.Interfaces.ICompileTimeExpression, Sharpliner.AzureDevOps.Expressions.Interfaces.IRuntimeExpression, YamlDotNet.Serialization.IYamlConvertible
    {
        public string CompileTimeExpression { get; }
        public string ParameterName { get; }
        public string RuntimeExpression { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference value) { }
    }
    public class StageToStageDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.DependencyVariableReference
    {
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
        public string StageName { get; }
    }
    public class StageToStageDeployDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.DependencyVariableReference
    {
        public override string MacroExpression { get; }
        public override string RuntimeExpression { get; }
        public string StageName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public class StageToStageDeployResourceDependencyVariableReference : Sharpliner.AzureDevOps.Expressions.StageToStageDeployDependencyVariableReference
    {
        public override string MacroExpression { get; }
        public string ResourceName { get; }
        public override string RuntimeExpression { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public class VariableReference : Sharpliner.AzureDevOps.Expressions.Interfaces.ICompileTimeExpression, Sharpliner.AzureDevOps.Expressions.Interfaces.IMacroExpression, Sharpliner.AzureDevOps.Expressions.Interfaces.IRuntimeExpression, YamlDotNet.Serialization.IYamlConvertible
    {
        public virtual string CompileTimeExpression { get; }
        public virtual string MacroExpression { get; }
        public virtual string RuntimeExpression { get; }
        public string VariableName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<int> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<bool> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<string> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<System.TimeSpan> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.TemplateParameters> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Expressions.DictionaryExpression> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.InlineCondition> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.VariableBase> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Stage> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.JobBase> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Step> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
        public static Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Pool> op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference value) { }
    }
    public class VariableReferenceExpression<T> : Sharpliner.AzureDevOps.Expressions.AdoExpression<T>, System.IEquatable<Sharpliner.AzureDevOps.Expressions.VariableReferenceExpression<T>>
    {
        public VariableReferenceExpression(Sharpliner.AzureDevOps.Expressions.VariableReference variable) { }
    }
}
namespace Sharpliner.AzureDevOps.Expressions.Arguments
{
    public class IfArrayExpression : OneOf.OneOfBase<string[], object[], Sharpliner.AzureDevOps.Expressions.ParameterReference[], Sharpliner.AzureDevOps.Expressions.VariableReference[]>
    {
        public IfArrayExpression(OneOf.OneOf<string[], object[], Sharpliner.AzureDevOps.Expressions.ParameterReference[], Sharpliner.AzureDevOps.Expressions.VariableReference[]> _) { }
        public static string[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression _) { }
        public static object[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.ParameterReference[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.VariableReference[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression op_Implicit(object[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfArrayExpression op_Implicit(string[] _) { }
    }
    public class IfExpression : OneOf.OneOfBase<string, Sharpliner.AzureDevOps.Expressions.ParameterReference, Sharpliner.AzureDevOps.Expressions.VariableReference>
    {
        public IfExpression(OneOf.OneOf<string, Sharpliner.AzureDevOps.Expressions.ParameterReference, Sharpliner.AzureDevOps.Expressions.VariableReference> _) { }
        public static string op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.ParameterReference op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.VariableReference op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.IfExpression op_Implicit(string _) { }
    }
    public class InlineArrayExpression : OneOf.OneOfBase<string[], object[], Sharpliner.AzureDevOps.Expressions.ParameterReference[], Sharpliner.AzureDevOps.Expressions.VariableReference[]>
    {
        public InlineArrayExpression(OneOf.OneOf<string[], object[], Sharpliner.AzureDevOps.Expressions.ParameterReference[], Sharpliner.AzureDevOps.Expressions.VariableReference[]> _) { }
        public static string[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression _) { }
        public static object[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.ParameterReference[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.VariableReference[] op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression op_Implicit(object[] _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineArrayExpression op_Implicit(string[] _) { }
    }
    public class InlineExpression : OneOf.OneOfBase<string, Sharpliner.AzureDevOps.Expressions.ParameterReference, Sharpliner.AzureDevOps.Expressions.VariableReference>
    {
        public InlineExpression(OneOf.OneOf<string, Sharpliner.AzureDevOps.Expressions.ParameterReference, Sharpliner.AzureDevOps.Expressions.VariableReference> _) { }
        public static string op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.ParameterReference op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.VariableReference op_Explicit(Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.ParameterReference _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(Sharpliner.AzureDevOps.Expressions.VariableReference _) { }
        public static Sharpliner.AzureDevOps.Expressions.Arguments.InlineExpression op_Implicit(string _) { }
    }
}
namespace Sharpliner.AzureDevOps.Expressions.Interfaces
{
    public interface ICompileTimeExpression
    {
        string CompileTimeExpression { get; }
    }
    public interface IMacroExpression
    {
        string MacroExpression { get; }
    }
    public interface IRuntimeExpression
    {
        string RuntimeExpression { get; }
    }
}
namespace Sharpliner.AzureDevOps.Tasks
{
    public enum ActionPreference
    {
        Continue = 0,
        Break = 1,
        Ignore = 2,
        Inquire = 3,
        SilentlyContinue = 4,
        Stop = 5,
        Suspend = 6,
    }
    public class ArchiveFilesTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.ArchiveFilesTask>
    {
        public ArchiveFilesTask(string rootFolderOrFile, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ArchiveType> archiveType, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> archiveFile) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ArchiveFile { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ArchiveType>? ArchiveType { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeRootFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Quiet { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ReplaceExistingArchive { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? RootFolderOrFile { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.SevenZipCompressionLevel>? SevenZipCompression { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.TarCompressionType>? TarCompression { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Verbose { get; init; }
    }
    public enum ArchiveType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="zip")]
        Zip = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="7z")]
        _7z = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="tar")]
        Tar = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="wim")]
        Wim = 3,
    }
    public enum ArtifactType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="pipeline")]
        Pipeline = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="filepath")]
        Filepath = 1,
    }
    public class AzureCliFileTask : Sharpliner.AzureDevOps.Tasks.AzureCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.AzureCliFileTask>
    {
        public AzureCliFileTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> scriptPath) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ScriptPath { get; init; }
    }
    public abstract class AzureCliTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.AzureCliTask>
    {
        public AzureCliTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptLocation> scriptLocation) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? AddSpnToEnvironment { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Arguments { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? AzureSubscription { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailOnStandardError { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.PowerShellErrorActionPreference>? PowerShellErrorActionPreference { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PowerShellIgnoreLASTEXITCODE { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptLocation>? ScriptLocation { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType>? ScriptType { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? UseGlobalConfig { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? VisibleAzLogin { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
    public class AzureCliTaskBuilder : Sharpliner.Common.Model.Tasks.TaskBuilderBase
    {
        public Sharpliner.AzureDevOps.Tasks.AzureCliFileTask File(string azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, string scriptPath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineAzureCliTask FromFile(string azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, string path, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineAzureCliTask FromResourceFile(string azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, string resourceFileName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineAzureCliTask Inline(string azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null, params string[] scriptLines) { }
    }
    public class AzureDevOpsTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask>
    {
        public AzureDevOpsTask(string task) { }
        [YamlDotNet.Serialization.YamlMember(Order=101)]
        public Sharpliner.AzureDevOps.Tasks.TaskInputs Inputs { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=230)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? RetryCountOnTaskFailure { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public string Task { get; }
        protected bool GetBool(string name, bool defaultValue) { }
        protected TEnum GetEnum<TEnum>(string name, TEnum defaultValue)
            where TEnum :  struct, System.Enum { }
        protected Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? GetExpression<T>(string name, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? defaultValue = null) { }
        protected int? GetInt(string name, int? defaultValue = default) { }
        protected string? GetString(string name, string? defaultValue = null) { }
        protected void SetProperty(string name, System.Enum? value) { }
        protected void SetProperty(string name, bool? value) { }
        protected void SetProperty(string name, int? value) { }
        protected void SetProperty(string name, string? value) { }
        protected void SetProperty<T>(string name, Sharpliner.AzureDevOps.Expressions.AdoExpression<T>? value) { }
    }
    public class BashFileTask : Sharpliner.AzureDevOps.Tasks.BashTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.BashFileTask>, YamlDotNet.Serialization.IYamlConvertible
    {
        public BashFileTask(string filePath) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Arguments { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BashEnv { get; init; }
        public string FilePath { get; }
    }
    public abstract class BashTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.BashTask>
    {
        protected BashTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailOnStderr { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=115)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? NoProfile { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? NoRc { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=113)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
    public class BashTaskBuilder : Sharpliner.Common.Model.Tasks.TaskBuilderBase
    {
        public Sharpliner.AzureDevOps.Tasks.BashFileTask File(string filePath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineBashTask FromFile(string path, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineBashTask FromResourceFile(string resourceFileName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlineBashTask Inline(params string[] scriptLines) { }
    }
    public enum BuildVerbosity
    {
        [YamlDotNet.Serialization.YamlMember(Alias="quiet")]
        Quiet = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="minimal")]
        Minimal = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="normal")]
        Normal = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="detailed")]
        Detailed = 3,
        [YamlDotNet.Serialization.YamlMember(Alias="diagnostic")]
        Diagnostic = 4,
    }
    public abstract class CheckoutTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.CheckoutTask>
    {
        protected CheckoutTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public abstract string Checkout { get; }
        [YamlDotNet.Serialization.YamlMember(Order=100)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Clean { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=101)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? FetchDepth { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=102)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FetchFilter { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=103)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FetchTags { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=104)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Lfs { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=107)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Path { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=105)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PersistCredentials { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=108)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SparseCheckoutDirectories { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=109)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SparseCheckoutPatterns { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=106)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.SubmoduleCheckout>? Submodules { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=110)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? WorkspaceRepo { get; init; }
    }
    public class CheckoutTaskBuilder
    {
        public Sharpliner.AzureDevOps.Tasks.NoneCheckoutTask None { get; }
        public Sharpliner.AzureDevOps.Tasks.SelfCheckoutTask Self { get; }
        public Sharpliner.AzureDevOps.Tasks.RepositoryCheckoutTask Repository(string repository) { }
    }
    public class CopyFilesTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.CopyFilesTask>
    {
        public CopyFilesTask(string contents, string targetFolder) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? CleanTargetFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Contents { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? DelayBetweenRetries { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FlattenFolders { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IgnoreMakeDirErrors { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Overwrite { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PreserveTimestamp { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? RetryCount { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SourceFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TargetFolder { get; init; }
    }
    public class CurrentDownloadTask : Sharpliner.AzureDevOps.Tasks.DownloadTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.CurrentDownloadTask>
    {
        public CurrentDownloadTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public override string Download { get; }
    }
    public class DeleteFilesTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DeleteFilesTask>
    {
        public DeleteFilesTask(string contents) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Contents { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? RemoveDotFiles { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? RemoveSourceFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SourceFolder { get; init; }
    }
    public class DotNetBuildCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetBuildCoreCliTask>
    {
        public DotNetBuildCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeNuGetOrg { get; init; }
    }
    public class DotNetCoreCliTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask>
    {
        public DotNetCoreCliTask(string command) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Arguments { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Projects { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
    public class DotNetPackCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetPackCoreCliTask>
    {
        public DotNetPackCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BuildProperties { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ConfigurationToPack { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeSource { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeSymbols { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? NoBuild { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? OutputDir { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackagesToPack { get; init; }
        public Sharpliner.AzureDevOps.Tasks.DotNetPackCoreCliTask VersionByBuildNumber() { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPackCoreCliTask VersionByEnvVar(string envVarName) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPackCoreCliTask VersionManually(string majorVersion, string minorVersion, string patchVersion) { }
    }
    public enum DotNetPackageType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="sdk")]
        Sdk = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="runtime")]
        Runtime = 1,
    }
    public class DotNetPublishCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetPublishCoreCliTask>
    {
        public DotNetPublishCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ModifyOutputPath { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PublishWebProjects { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ZipAfterPublish { get; init; }
    }
    public class DotNetPushCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetPushCoreCliTask>
    {
        public DotNetPushCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackagesToPush { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PublishPackageMetadata { get; init; }
        public Sharpliner.AzureDevOps.Tasks.DotNetPushCoreCliTask PublishExternally(string targetFeedCredentials) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPushCoreCliTask PublishInternally(string targetFeed) { }
    }
    public class DotNetRestoreCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetRestoreCoreCliTask>
    {
        public DotNetRestoreCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ExternalFeedCredentials { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeNuGetOrg { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? NoCache { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? NuGetConfigPath { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? RestoreArguments { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? RestoreDirectory { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.BuildVerbosity>? VerbosityRestore { get; init; }
    }
    public class DotNetTaskBuilder
    {
        public Sharpliner.AzureDevOps.Tasks.DotNetTaskBuilder.DotNetInstallBuilder Install { get; }
        public Sharpliner.AzureDevOps.Tasks.DotNetTaskBuilder.DotNetRestoreBuilder Restore { get; }
        public Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask Run { get; }
        public Sharpliner.AzureDevOps.Tasks.DotNetBuildCoreCliTask Build(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> projects, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? includeNuGetOrg = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null) { }
        public Sharpliner.AzureDevOps.Step CustomCommand(string command, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null, Sharpliner.AzureDevOps.Tasks.TaskInputs? inputs = null) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPackCoreCliTask Pack(Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? packagesToPack, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPublishCoreCliTask Publish(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> projects, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? publishWebProjects = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetPushCoreCliTask Push(Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? packagesToPush = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null) { }
        public Sharpliner.AzureDevOps.Tasks.DotNetTestCoreCliTask Test(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> projects, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? arguments = null) { }
        public class DotNetInstallBuilder
        {
            public Sharpliner.AzureDevOps.Tasks.UseDotNetTask FromGlobalJson(Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? workingDirectory = null) { }
            public Sharpliner.AzureDevOps.Tasks.UseDotNetTask Runtime(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> version, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? includePreviewVersions = null) { }
            public Sharpliner.AzureDevOps.Tasks.UseDotNetTask Sdk(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> version, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? includePreviewVersions = null) { }
        }
        public class DotNetRestoreBuilder
        {
            public Sharpliner.AzureDevOps.Tasks.DotNetRestoreCoreCliTask FromFeed(string feed, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? includeNuGetOrg = null) { }
            public Sharpliner.AzureDevOps.Tasks.DotNetRestoreCoreCliTask FromNuGetConfig(string nugetConfigPath) { }
            public Sharpliner.AzureDevOps.Tasks.DotNetRestoreCoreCliTask Projects(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> projects) { }
        }
    }
    public class DotNetTestCoreCliTask : Sharpliner.AzureDevOps.Tasks.DotNetCoreCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DotNetTestCoreCliTask>
    {
        public DotNetTestCoreCliTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PublishTestResults { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TestRunTitle { get; init; }
    }
    public class DownloadFromPipelineResourceTask : Sharpliner.AzureDevOps.Tasks.DownloadTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DownloadFromPipelineResourceTask>
    {
        public DownloadFromPipelineResourceTask(string resourceName) { }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public override string Download { get; }
    }
    public abstract class DownloadTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.DownloadTask>
    {
        protected DownloadTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=60)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Artifact { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public abstract string Download { get; }
        [YamlDotNet.Serialization.YamlMember(Order=62)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Path { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.List<string> Patterns { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.List<string> Tags { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="patterns", Order=61, ScalarStyle=YamlDotNet.Core.ScalarStyle.Literal)]
        public string _Patterns { get; }
        [YamlDotNet.Serialization.YamlMember(Alias="tags", Order=104)]
        public string? _Tags { get; }
    }
    public class DownloadTaskBuilder
    {
        public Sharpliner.AzureDevOps.Tasks.CurrentDownloadTask Current { get; }
        public Sharpliner.AzureDevOps.Tasks.NoneDownloadTask None { get; }
        public Sharpliner.AzureDevOps.Tasks.DownloadFromPipelineResourceTask FromPipelineResource(string resourceName, string? artifact = null, System.Collections.Generic.IEnumerable<string>? patterns = null) { }
        public Sharpliner.AzureDevOps.Tasks.SpecificDownloadTask LatestFromBranch(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> project, Sharpliner.AzureDevOps.Expressions.AdoExpression<int> definition, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? branchName = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? artifact = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? path = null, System.Collections.Generic.IEnumerable<string>? patterns = null) { }
        public Sharpliner.AzureDevOps.Tasks.SpecificDownloadTask SpecificBuild(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> project, Sharpliner.AzureDevOps.Expressions.AdoExpression<int> definition, Sharpliner.AzureDevOps.Expressions.AdoExpression<int> buildId, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? artifact = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? path = null, System.Collections.Generic.IEnumerable<string>? patterns = null) { }
    }
    public class ExtractFilesTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.ExtractFilesTask>
    {
        public ExtractFilesTask(string destinationFolder) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ArchiveFilePatterns { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? CleanDestinationFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DestinationFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? OverwriteExistingFiles { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PathToSevenZipTool { get; init; }
    }
    public class InlineAzureCliTask : Sharpliner.AzureDevOps.Tasks.AzureCliTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.InlineAzureCliTask>
    {
        public InlineAzureCliTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> azureSubscription, Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ScriptType> scriptType, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> inlineScript) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? InlineScript { get; init; }
    }
    public class InlineBashTask : Sharpliner.AzureDevOps.Tasks.BashTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.InlineBashTask>
    {
        public InlineBashTask(params string[] scriptLines) { }
        [YamlDotNet.Serialization.YamlMember(Alias="bash", Order=1, ScalarStyle=YamlDotNet.Core.ScalarStyle.Literal)]
        public string Contents { get; }
    }
    public class InlinePowershellTask : Sharpliner.AzureDevOps.Tasks.PowershellTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.InlinePowershellTask>
    {
        public InlinePowershellTask(params string[] scriptLines) { }
        [YamlDotNet.Serialization.YamlMember(Alias="powershell", Order=1, ScalarStyle=YamlDotNet.Core.ScalarStyle.Literal)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Contents { get; init; }
    }
    public class InlinePwshTask : Sharpliner.AzureDevOps.Tasks.PowershellTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.InlinePwshTask>
    {
        public InlinePwshTask(params string[] scriptLines) { }
        [YamlDotNet.Serialization.YamlMember(Alias="pwsh", Order=1, ScalarStyle=YamlDotNet.Core.ScalarStyle.Literal)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Contents { get; init; }
    }
    public class NoneCheckoutTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NoneCheckoutTask>
    {
        public NoneCheckoutTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public string Checkout { get; }
    }
    public class NoneDownloadTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NoneDownloadTask>
    {
        public NoneDownloadTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=1)]
        public string Download { get; }
    }
    public class NuGetAuthenticateTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetAuthenticateTask>
    {
        public NuGetAuthenticateTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ForceReinstallCredentialProvider { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public string[]? NuGetServiceConnections { get; init; }
    }
    public abstract class NuGetCommandTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetCommandTask>
    {
        protected NuGetCommandTask(string command) { }
    }
    public class NuGetCustomCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetCustomCommandTask>
    {
        public NuGetCustomCommandTask(string arguments) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Arguments { get; init; }
    }
    public class NuGetPackBuilder
    {
        public NuGetPackBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByBuildNumber ByBuildNumber { get; }
        public Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskOff WithoutPackageVersioning { get; }
        public Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByEnvVar ByEnvVar(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> versionEnvVar) { }
        public Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByPrereleaseNumber ByPrereleaseNumber(string majorVersion, string minorVersion, string patchVersion) { }
    }
    public abstract class NuGetPackCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTask>
    {
        public NuGetPackCommandTask(string versioningScheme) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BasePath { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.Dictionary<string, string>? BuildProperties { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Configuration { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeSymbols { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackDestination { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackagesToPack { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? ToolPackage { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.PackVerbosity>? VerbosityPack { get; init; }
    }
    public class NuGetPackCommandTaskByBuildNumber : Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByBuildNumber>
    {
        public NuGetPackCommandTaskByBuildNumber() { }
    }
    public class NuGetPackCommandTaskByEnvVar : Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByEnvVar>
    {
        public NuGetPackCommandTaskByEnvVar(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> versionEnvVar) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VersionEnvVar { get; init; }
    }
    public class NuGetPackCommandTaskByPrereleaseNumber : Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskByPrereleaseNumber>
    {
        public NuGetPackCommandTaskByPrereleaseNumber(string majorVersion, string minorVersion, string patchVersion) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? MajorVersion { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? MinorVersion { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.PackTimezoneType>? PackTimezone { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PatchVersion { get; init; }
    }
    public class NuGetPackCommandTaskOff : Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPackCommandTaskOff>
    {
        public NuGetPackCommandTaskOff() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeReferencedProjects { get; init; }
    }
    public class NuGetPushBuilder
    {
        public NuGetPushBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.NuGetPushExternalCommandTask ToExternalFeed(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> publishFeedCredentials) { }
        public Sharpliner.AzureDevOps.Tasks.NuGetPushInternalCommandTask ToInternalFeed(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> publishVstsFeed) { }
    }
    public abstract class NuGetPushCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPushCommandTask>
    {
        public NuGetPushCommandTask(string nuGetFeedType) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public string[] PackagesToPush { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TargetFeed { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TargetFeedCredentials { get; init; }
    }
    public class NuGetPushExternalCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetPushCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPushExternalCommandTask>
    {
        public NuGetPushExternalCommandTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> publishFeedCredentials) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishFeedCredentials { get; init; }
    }
    public class NuGetPushInternalCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetPushCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetPushInternalCommandTask>
    {
        public NuGetPushInternalCommandTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> publishVstsFeed) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? AllowPackageConflicts { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PublishPackageMetadata { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishVstsFeed { get; init; }
    }
    public class NuGetRestoreBuilder
    {
        public NuGetRestoreBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.NuGetRestoreFeedCommandTask FromFeed(string vstsFeed) { }
        public Sharpliner.AzureDevOps.Tasks.NuGetRestoreConfigCommandTask FromNuGetConfig(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> nugetConfigPath) { }
    }
    public abstract class NuGetRestoreCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetRestoreCommandTask>
    {
        protected NuGetRestoreCommandTask(string feedsToUse) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? NoCache { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? RestoreSolution { get; init; }
    }
    public class NuGetRestoreConfigCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetRestoreCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetRestoreConfigCommandTask>
    {
        public NuGetRestoreConfigCommandTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ExternalFeedCredentials { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? NuGetConfigPath { get; init; }
    }
    public class NuGetRestoreFeedCommandTask : Sharpliner.AzureDevOps.Tasks.NuGetRestoreCommandTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.NuGetRestoreFeedCommandTask>
    {
        public NuGetRestoreFeedCommandTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludeNuGetOrg { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsFeed { get; init; }
    }
    public class NuGetTaskBuilder
    {
        public NuGetTaskBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.NuGetPackBuilder Pack { get; }
        public Sharpliner.AzureDevOps.Tasks.NuGetPushBuilder Push { get; }
        public Sharpliner.AzureDevOps.Tasks.NuGetRestoreBuilder Restore { get; }
        public Sharpliner.AzureDevOps.Tasks.NuGetAuthenticateTask Authenticate(string[]? nuGetServiceConnections = null, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? forceReinstallCredentialProvider = null) { }
        public Sharpliner.AzureDevOps.Tasks.NuGetCustomCommandTask Custom(string arguments) { }
    }
    public enum PackTimezoneType
    {
        UTC = 0,
        Local = 1,
    }
    public enum PackVerbosity
    {
        Quiet = 0,
        Normal = 1,
        Detailed = 2,
    }
    public enum PowerShellErrorActionPreference
    {
        [YamlDotNet.Serialization.YamlMember(Alias="stop")]
        Stop = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="continue")]
        Continue = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="silentlyContinue")]
        SilentlyContinue = 2,
    }
    public class PowershellFileTask : Sharpliner.AzureDevOps.Tasks.PowershellTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.PowershellFileTask>, YamlDotNet.Serialization.IYamlConvertible
    {
        public PowershellFileTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> filePath, bool isPwsh) { }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Arguments { get; init; }
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FilePath { get; }
    }
    public abstract class PowershellTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.PowershellTask>
    {
        protected PowershellTask() { }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ActionPreference>? DebugPreference { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ActionPreference>? ErrorActionPreference { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=125)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailOnStderr { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=126)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IgnoreLASTEXITCODE { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ActionPreference>? InformationPreference { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ActionPreference>? VerbosePreference { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=114)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ActionPreference>? WarningPreference { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=113)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
    public class PowershellTaskBuilder : Sharpliner.Common.Model.Tasks.TaskBuilderBase
    {
        public PowershellTaskBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.PowershellFileTask File(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> filePath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePowershellTask FromFile(string path, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePowershellTask FromResourceFile(string resourceFileName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePowershellTask Inline(params string[] scriptLines) { }
    }
    public class PublishCodeCoverageResultsTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.PublishCodeCoverageResultsTask>
    {
        public PublishCodeCoverageResultsTask(string summaryFileLocation) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailIfCoverageEmpty { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PathToSources { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SummaryFileLocation { get; init; }
    }
    public class PublishTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.PublishTask>
    {
        public PublishTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> targetPath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? artifactName = null) { }
        [YamlDotNet.Serialization.YamlMember(Order=101)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Artifact { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=102)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.ArtifactType>? ArtifactType { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=211)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FileSharePath { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=212)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? Parallel { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=213)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<uint>? ParallelCount { get; init; }
        [YamlDotNet.Serialization.YamlMember(Alias="publish", Order=1)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TargetPath { get; }
    }
    public class PublishTaskBuilder
    {
        public PublishTaskBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.PublishTask FileShare(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> artifactName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> targetPath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> fileSharePath) { }
        public Sharpliner.AzureDevOps.Tasks.PublishTask Pipeline(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> artifactName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> targetPath) { }
    }
    public class PublishTestResultsTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.PublishTestResultsTask>
    {
        public PublishTestResultsTask(Sharpliner.AzureDevOps.Tasks.TestResultsFormat testResultsFormat, string testResultsFile) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BuildConfiguration { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BuildPlatform { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailTaskOnFailedTests { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailTaskOnFailureToPublishResults { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailTaskOnMissingResultsFile { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? MergeTestResults { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PublishRunAttachments { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? SearchFolder { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TestResultsFiles { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.TestResultsFormat>? TestResultsFormat { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? TestRunTitle { get; init; }
    }
    public class PwshTaskBuilder : Sharpliner.Common.Model.Tasks.TaskBuilderBase
    {
        public PwshTaskBuilder() { }
        public Sharpliner.AzureDevOps.Tasks.PowershellFileTask File(Sharpliner.AzureDevOps.Expressions.AdoExpression<string> filePath, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePwshTask FromFile(string path, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePwshTask FromResourceFile(string resourceFileName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.InlinePwshTask Inline(params string[] scriptLines) { }
    }
    public class RepositoryCheckoutTask : Sharpliner.AzureDevOps.Tasks.CheckoutTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.RepositoryCheckoutTask>
    {
        public RepositoryCheckoutTask(string repository) { }
        public override string Checkout { get; }
    }
    public enum RunVersion
    {
        [YamlDotNet.Serialization.YamlMember(Alias="latest")]
        Latest = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="latestFromBranch")]
        LatestFromBranch = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="specific")]
        Specific = 2,
    }
    public enum ScriptLocation
    {
        [YamlDotNet.Serialization.YamlMember(Alias="scriptPath")]
        ScriptPath = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="inlineScript")]
        InlineScript = 1,
    }
    public class ScriptTask : Sharpliner.AzureDevOps.Step, System.IEquatable<Sharpliner.AzureDevOps.Tasks.ScriptTask>
    {
        public ScriptTask(params string[] scriptLines) { }
        [YamlDotNet.Serialization.YamlMember(Alias="script", Order=1, ScalarStyle=YamlDotNet.Core.ScalarStyle.Literal)]
        public string Contents { get; }
        [YamlDotNet.Serialization.YamlMember(Order=200)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? FailOnStdErr { get; init; }
        [YamlDotNet.Serialization.YamlMember(Order=113)]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
    public class ScriptTaskBuilder : Sharpliner.Common.Model.Tasks.TaskBuilderBase
    {
        public Sharpliner.AzureDevOps.Tasks.ScriptTask FromFile(string path, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.ScriptTask FromResourceFile(string resourceFileName, Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? displayName = null) { }
        public Sharpliner.AzureDevOps.Tasks.ScriptTask Inline(params string[] scriptLines) { }
    }
    public enum ScriptType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="ps")]
        Ps = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="pscore")]
        Pscore = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="batch")]
        Batch = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="bash")]
        Bash = 3,
    }
    public class SelfCheckoutTask : Sharpliner.AzureDevOps.Tasks.CheckoutTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.SelfCheckoutTask>
    {
        public SelfCheckoutTask() { }
        public override string Checkout { get; }
    }
    public enum SevenZipCompressionLevel
    {
        [YamlDotNet.Serialization.YamlMember(Alias="none")]
        None = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="fastest")]
        Fastest = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="fast")]
        Fast = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="normal")]
        Normal = 3,
        [YamlDotNet.Serialization.YamlMember(Alias="maximum")]
        Maximum = 4,
        [YamlDotNet.Serialization.YamlMember(Alias="ultra")]
        Ultra = 5,
    }
    public class SpecificDownloadTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.SpecificDownloadTask>
    {
        public SpecificDownloadTask(Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.RunVersion> runVersion, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> project, Sharpliner.AzureDevOps.Expressions.AdoExpression<int> pipeline) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? AllowFailedBuilds { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? AllowPartiallySucceededBuilds { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Artifact { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? BranchName { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int> BuildId { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? CheckDownloadedFiles { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Path { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.List<string>? Patterns { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int>? Pipeline { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int> PipelineId { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PreferTriggeringPipeline { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string> Project { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int> RetryDownloadCount { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? RunBranch { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<int> RunId { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<Sharpliner.AzureDevOps.Tasks.RunVersion>? RunVersion { get; }
        [YamlDotNet.Serialization.YamlIgnore]
        public System.Collections.Generic.List<string> Tags { get; init; }
    }
    public enum SubmoduleCheckout
    {
        [YamlDotNet.Serialization.YamlMember(Alias="false")]
        None = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="true")]
        SingleLevel = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="recursive")]
        Recursive = 2,
    }
    public enum TarCompressionType
    {
        [YamlDotNet.Serialization.YamlMember(Alias="gz")]
        Gz = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="bz2")]
        Bz2 = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="xz")]
        Xz = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="none")]
        None = 3,
    }
    public class TaskInputs : Sharpliner.AzureDevOps.Expressions.DictionaryExpression
    {
        public TaskInputs() { }
    }
    public enum TestResultsFormat
    {
        [YamlDotNet.Serialization.YamlMember(Alias="JUnit")]
        JUnit = 0,
        [YamlDotNet.Serialization.YamlMember(Alias="NUnit")]
        NUnit = 1,
        [YamlDotNet.Serialization.YamlMember(Alias="VSTest")]
        VSTest = 2,
        [YamlDotNet.Serialization.YamlMember(Alias="XUnit")]
        XUnit = 3,
        [YamlDotNet.Serialization.YamlMember(Alias="CTest")]
        CTest = 4,
    }
    public class UniversalPackagesDownloadTask : Sharpliner.AzureDevOps.Tasks.UniversalPackagesTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.UniversalPackagesDownloadTask>
    {
        public UniversalPackagesDownloadTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? DownloadDirectory { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? ExternalFeedCredentials { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FeedDownloadExternal { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FeedsToUse { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackageDownloadExternal { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VersionDownloadExternal { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsFeed { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsFeedPackage { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsPackageVersion { get; init; }
    }
    public class UniversalPackagesPublishTask : Sharpliner.AzureDevOps.Tasks.UniversalPackagesTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.UniversalPackagesPublishTask>
    {
        public UniversalPackagesPublishTask() { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FeedPublishExternal { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? FeedsToUsePublish { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackagePublishDescription { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PackagePublishExternal { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishDirectory { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishFeedCredentials { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishPackageMetadata { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? PublishedPackageVar { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VersionOption { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VersionPublish { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsFeedPackagePublish { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? VstsFeedPublish { get; init; }
    }
    public abstract class UniversalPackagesTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.UniversalPackagesTask>
    {
        public UniversalPackagesTask(string command) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Command { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Verbosity { get; init; }
    }
    public class UseDotNetTask : Sharpliner.AzureDevOps.Tasks.AzureDevOpsTask, System.IEquatable<Sharpliner.AzureDevOps.Tasks.UseDotNetTask>
    {
        public UseDotNetTask() { }
        public UseDotNetTask(Sharpliner.AzureDevOps.Tasks.DotNetPackageType packageType, Sharpliner.AzureDevOps.Expressions.AdoExpression<string> version, Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? includePreviewVersions = null) { }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? IncludePreviewVersions { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? InstallationPath { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Tasks.DotNetPackageType PackageType { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? PerformMultiLevelLookup { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<bool>? UseGlobalJson { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? Version { get; init; }
        [YamlDotNet.Serialization.YamlIgnore]
        public Sharpliner.AzureDevOps.Expressions.AdoExpression<string>? WorkingDirectory { get; init; }
    }
}
namespace Sharpliner.AzureDevOps.Validation
{
    public static class ValidationsExtensions
    {
        public static System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> GetJobValidations(this Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase> jobs) { }
        public static System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.JobBase> GetJobs(this Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage> stages) { }
        public static System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> GetStageValidations(this Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.Stage> stages) { }
        public static System.Collections.Generic.IEnumerable<Sharpliner.AzureDevOps.Step> GetSteps(this Sharpliner.AzureDevOps.Expressions.AdoExpressionList<Sharpliner.AzureDevOps.JobBase> jobs) { }
    }
}
namespace Sharpliner.AzureDevOps.VariableReferences
{
    public class DependencyVariable
    {
        public readonly Sharpliner.AzureDevOps.VariableReferences.JobLevelDependencyVariable job;
        public readonly Sharpliner.AzureDevOps.VariableReferences.StageLevelDependencyVariable stage;
        public DependencyVariable() { }
    }
    public class JobLevelDependencyVariable
    {
        public readonly Sharpliner.AzureDevOps.VariableReferences.JobLevelDeploymentDependencyVariable deploy;
        public JobLevelDependencyVariable() { }
        public Sharpliner.AzureDevOps.Expressions.JobToJobSameStageDependencyVariableReference this[string jobName, string stepName, string variableName] { get; }
        public Sharpliner.AzureDevOps.Expressions.JobToJobDifferentStageDependencyVariableReference this[string stageName, string jobName, string stepName, string variableName] { get; }
    }
    public class JobLevelDeploymentDependencyVariable
    {
        public JobLevelDeploymentDependencyVariable() { }
        public Sharpliner.AzureDevOps.Expressions.JobToJobDeployDependencyVariableReference this[string stageName, string jobName, string stepName, string variableName] { get; }
    }
    public class StageLevelDependencyVariable
    {
        public readonly Sharpliner.AzureDevOps.VariableReferences.StageLevelDeploymentDependencyVariable deploy;
        public StageLevelDependencyVariable() { }
        public Sharpliner.AzureDevOps.Expressions.StageToStageDependencyVariableReference this[string stageName, string jobName, string stepName, string variableName] { get; }
    }
    public class StageLevelDeploymentDependencyVariable
    {
        public StageLevelDeploymentDependencyVariable() { }
        public Sharpliner.AzureDevOps.Expressions.StageToStageDeployDependencyVariableReference this[string stageName, string jobName, string stepName, string variableName] { get; }
        public Sharpliner.AzureDevOps.Expressions.StageToStageDeployResourceDependencyVariableReference this[string stageName, string jobName, string stepName, string variableName, string resourceName] { get; }
    }
}
namespace Sharpliner.Common
{
    public interface IDefinitionValidation
    {
        System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.ValidationError> Validate();
    }
    public class ValidationError
    {
        public ValidationError(Sharpliner.Common.ValidationSeverity severity, string message) { }
        public string Message { get; }
        public Sharpliner.Common.ValidationSeverity Severity { get; }
    }
    public enum ValidationSeverity
    {
        Off = 0,
        Trace = 1,
        Information = 2,
        Warning = 3,
        Error = 4,
    }
}
namespace Sharpliner.Common.Model.Tasks
{
    public abstract class TaskBuilderBase
    {
        protected TaskBuilderBase() { }
        protected static string GetResourceFile(System.Reflection.Assembly assembly, string resourceFileName) { }
    }
}
namespace Sharpliner
{
    public interface ISharplinerConfiguration
    {
        Sharpliner.SharplinerConfiguration.SerializationHooks Hooks { get; }
        Sharpliner.SharplinerConfiguration.SerializationSettings Serialization { get; }
        Sharpliner.SharplinerConfiguration.ValidationsSettings Validations { get; }
    }
    public interface ISharplinerDefinition
    {
        string[]? Header { get; }
        string TargetFile { get; }
        Sharpliner.TargetPathType TargetPathType { get; }
        System.Collections.Generic.IReadOnlyCollection<Sharpliner.Common.IDefinitionValidation> Validations { get; }
        string Serialize();
    }
    public interface ISharplinerDefinitionCollection
    {
        System.Collections.Generic.IEnumerable<Sharpliner.ISharplinerDefinition> Definitions { get; }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class PublishDefinitions : Microsoft.Build.Utilities.Task
    {
        public PublishDefinitions() { }
        [Microsoft.Build.Framework.Required]
        public string? Assembly { get; set; }
        public bool FailIfChanged { get; set; }
        public override bool Execute() { }
    }
    public abstract class SharplinerConfiguration : Sharpliner.ISharplinerConfiguration
    {
        protected SharplinerConfiguration() { }
        public Sharpliner.SharplinerConfiguration.SerializationHooks Hooks { get; }
        public Sharpliner.SharplinerConfiguration.SerializationSettings Serialization { get; }
        public Sharpliner.SharplinerConfiguration.ValidationsSettings Validations { get; }
        public abstract void Configure();
        public class SerializationHooks
        {
            public SerializationHooks() { }
            public Sharpliner.SharplinerConfiguration.SerializationHooks.AfterPublishHandler? AfterPublish { get; set; }
            public Sharpliner.SharplinerConfiguration.SerializationHooks.BeforePublishHandler? BeforePublish { get; set; }
            public delegate void AfterPublishHandler(Sharpliner.ISharplinerDefinition definition, string destinationPath, string yaml);
            public delegate void BeforePublishHandler(Sharpliner.ISharplinerDefinition definition, string destinationPath);
        }
        public class SerializationSettings
        {
            public SerializationSettings() { }
            public bool IncludeHeaders { get; set; }
            public bool PrettifyYaml { get; set; }
            public bool UseElseExpression { get; set; }
        }
        public class ValidationsSettings
        {
            public ValidationsSettings() { }
            public Sharpliner.Common.ValidationSeverity DependsOnFields { get; set; }
            public Sharpliner.Common.ValidationSeverity NameFields { get; set; }
            public Sharpliner.Common.ValidationSeverity RepositoryCheckouts { get; set; }
        }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class SharplinerPublisher
    {
        public SharplinerPublisher(Microsoft.Build.Utilities.TaskLoggingHelper logger) { }
        public bool Publish(string assemblyPath, bool failIfChanged) { }
        public static string[] GetDefaultHeader(System.Type type) { }
    }
    public static class SharplinerSerializer
    {
        public static string Serialize(object data, Sharpliner.ISharplinerConfiguration? configuration = null) { }
    }
    public enum TargetPathType
    {
        RelativeToGitRoot = 0,
        RelativeToCurrentDir = 1,
        RelativeToAssembly = 2,
        Absolute = 3,
    }
}